// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
precision highp float;

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

// version 300 code
_centroid in vec2 uv;

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code
varying vec2 uv;

#endif

#ifndef _UNIFORM_ENTITY_CONSTANTS_H
#define _UNIFORM_ENTITY_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
uniform ActorConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ActorConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 OVERLAY_COLOR;
UNIFORM vec4 TILE_LIGHT_COLOR;
UNIFORM vec2 TILE_LIGHT_INTENSITY;
UNIFORM vec4 CHANGE_COLOR;
UNIFORM vec4 GLINT_COLOR;
UNIFORM vec4 UV_ANIM;
UNIFORM vec2 UV_OFFSET;
UNIFORM vec2 UV_ROTATION;
UNIFORM vec2 GLINT_UV_SCALE;
UNIFORM vec4 MULTIPLICATIVE_TINT_CHANGE_COLOR;
END_UNIFORM_BLOCK

#endif


#ifndef _UNIFORM_PER_FRAME_CONSTANTS_H
#define _UNIFORM_PER_FRAME_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
layout(binding = 2) uniform PerFrameConstants {
#endif
// BEGIN_UNIFORM_BLOCK(PerFrameConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec3 VIEW_POS;
#ifdef MCPE_NETEASE
// TIME will loop from [0, 210]
// make sure your shader handles the case when it transitions from 210 to 0
#endif
UNIFORM float TIME;
#ifdef MCPE_NETEASE
UNIFORM vec4 BLEND_COLOR;
UNIFORM vec4 USER_FOR_COLOR_NEAR;
UNIFORM vec4 USER_FOR_COLOR_FAR;

UNIFORM vec4 LIGHT_NUM_STRENGTH;
UNIFORM vec4 LIGHT_POS_RANGE_0;
UNIFORM vec4 LIGHT_COLOR_ATTEN_0;
UNIFORM vec4 LIGHT_DIR_TYPE_0;
UNIFORM vec4 LIGHT_FALLOFF_COS_0;

UNIFORM vec4 LIGHT_POS_RANGE_1;
UNIFORM vec4 LIGHT_COLOR_ATTEN_1;
UNIFORM vec4 LIGHT_DIR_TYPE_1;
UNIFORM vec4 LIGHT_FALLOFF_COS_1;

UNIFORM vec4 LIGHT_POS_RANGE_2;
UNIFORM vec4 LIGHT_COLOR_ATTEN_2;
UNIFORM vec4 LIGHT_DIR_TYPE_2;
UNIFORM vec4 LIGHT_FALLOFF_COS_2;

UNIFORM vec4 PLANAR_SHADOW_PARAMS1;
UNIFORM vec4 PLANAR_SHADOW_PARAMS2;
UNIFORM vec4 PLANAR_SHADOW_PARAMS3;
UNIFORM vec4 PLANAR_SHADOW_PARAMS4;
#endif
UNIFORM vec4 FOG_COLOR;
UNIFORM vec2 FOG_CONTROL;
UNIFORM float RENDER_DISTANCE;
UNIFORM float FAR_CHUNKS_DISTANCE;
UNIFORM float OCCLUSION_HEIGHT_OFFSET;
END_UNIFORM_BLOCK

#endif

#ifndef _UNIFORM_SHADER_CONSTANTS_H
#define _UNIFORM_SHADER_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform ShaderConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 CURRENT_COLOR;
UNIFORM vec4 DARKEN;
UNIFORM vec3 TEXTURE_DIMENSIONS;
UNIFORM float HUD_OPACITY;
UNIFORM MAT4 UV_TRANSFORM;
END_UNIFORM_BLOCK

#endif

#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
#define USE_TEXEL_AA 0
#else
#define USE_TEXEL_AA 1
#endif

#ifdef ALPHA_TEST
#define USE_ALPHA_TEST 1
#else
#define USE_ALPHA_TEST 0
#endif

#if __VERSION__ >= 300

#ifndef _UNIFORM_SHADER_CONSTANTS_H
#define _UNIFORM_SHADER_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform ShaderConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 CURRENT_COLOR;
UNIFORM vec4 DARKEN;
UNIFORM vec3 TEXTURE_DIMENSIONS;
UNIFORM float HUD_OPACITY;
UNIFORM MAT4 UV_TRANSFORM;
END_UNIFORM_BLOCK

#endif


#if USE_TEXEL_AA

const float TEXEL_AA_LOD_CONSERVATIVE = -1.0;
const float TEXEL_AA_LOD_RELAXED = 2.0;

vec4 texture2D_AA(in sampler2D source, in highp vec2 originalUV) {

	highp vec2 dUV_dX = dFdx(originalUV) * TEXTURE_DIMENSIONS.xy;
	highp vec2 dUV_dY = dFdy(originalUV) * TEXTURE_DIMENSIONS.xy;

	highp vec2 delU = vec2(dUV_dX.x, dUV_dY.x);
	highp vec2 delV = vec2(dUV_dX.y, dUV_dY.y);
	highp vec2 adjustmentScalar = max(1.0 / vec2(length(delU), length(delV)), 1.0);

	highp vec2 fractionalTexel = fract(originalUV * TEXTURE_DIMENSIONS.xy);
	highp vec2 adjustedFractionalTexel = clamp(fractionalTexel * adjustmentScalar, 0.0, 0.5) + clamp(fractionalTexel * adjustmentScalar - (adjustmentScalar - 0.5), 0.0, 0.5);

	highp float lod = log2(sqrt(max(dot(dUV_dX, dUV_dX), dot(dUV_dY, dUV_dY))) * 2.0);
	highp float samplingMode = smoothstep(TEXEL_AA_LOD_RELAXED, TEXEL_AA_LOD_CONSERVATIVE, lod);

	highp vec2 adjustedUV = (adjustedFractionalTexel + floor(originalUV * TEXTURE_DIMENSIONS.xy)) / TEXTURE_DIMENSIONS.xy;
	lowp vec4 blendedSample = texture2D(source, mix(originalUV, adjustedUV, samplingMode));

	#if USE_ALPHA_TEST
		return vec4(blendedSample.rgb, mix(blendedSample.a, smoothstep(1.0/2.0, 1.0, blendedSample.a), samplingMode));
	#else
		return blendedSample;
	#endif
}

#endif // USE_TEXEL_AA

#endif //__VERSION__ >= 300


LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0; // 描边图
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1; // 波纹混合贴图(R:底图, G:波纹贴图, B:波纹高亮遮罩&扰动贴图)
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2; // MatCap贴图(A通道为透明度控制)
LAYOUT_BINDING(3) uniform sampler2D TEXTURE_3; // 炫光贴图

varying vec3 worldDir;
varying vec3 worldNormal;
varying vec3 viewNormal;
varying vec3 viewPos;

#define _OutlineColor vec3(230.0, 230.0, 230.0)// <name:描边颜色调整>
#define _MainTexPannerSpeed vec2(0.03, 0.15)// <name:底图移动速度>
#define _TurbulenceIntensity 0.0890// <name:扰动强度>
#define _TurbulenceTexPannerSpeed vec2(-0.3,-0.08)// <name:扰动贴图移动速度>
#define _MatCapIntensity 0.5000// <name:MatCap强度>
#define _AlphaControl 0.8500// <name:透明度控制>
#define _FlashColor vec3(26.0, 26.0, 26.0)// <name:炫光颜色>
#define _FlashTexPannerSpeed vec2(0.0, 0.4)// <name:炫光贴图移动速度>
#define _BaseColor vec3(150.0,128.0,20.0)// <name:基础颜色>
#define _BaseColor2 vec3(200.0,102.0,20.0)// <name:基础颜色2>
#define _WaveColor vec3(205.0, 205.0, 205.0)// <name:波纹颜色>
#define _WaveTiling vec2(1.0, 1.0) //<name:波纹平铺率>
#define _FrensnelColor vec3(0.0, 0.0, 26.0)// <name:菲涅尔颜色(add)>
#define _FrensnelPower 3.0000// <name:菲涅尔pow>
#define _PixelNum 200.0000// <name:像素化尺寸>

const mediump float from_255 = 1.0 / 255.0;

vec2 MC_Pixelation(vec2 uv, float m) {
	return vec2(floor(uv.x * m), floor(uv.y * m)) / m;
}

void main() {
	vec3 viewDir = normalize(worldDir);
	float frensnelVal = 1.0 - dot(worldNormal, viewDir);
	frensnelVal = pow(frensnelVal, _FrensnelPower);

	vec2 new_uv = MC_Pixelation(uv, _PixelNum);
	vec2 alpha_uv = clamp(new_uv, 0.0, 1.0);
	// 扰动
	vec2 uv_TurbulenceTex = new_uv * _WaveTiling;
	vec2 pannerUV = TIME * _TurbulenceTexPannerSpeed;
	uv_TurbulenceTex += MC_Pixelation(pannerUV, _PixelNum);
	mediump float tur = texture2D(TEXTURE_1, fract(uv_TurbulenceTex)).b;
	tur *= _TurbulenceIntensity;
	new_uv += MC_Pixelation(vec2(tur, tur), _PixelNum);

	// 底图 波纹亮暗 波纹
	vec2 uv_mainTex = new_uv * _WaveTiling;
	uv_mainTex += TIME * _MainTexPannerSpeed;
	vec3 mixColor = texture2D(TEXTURE_1, fract(uv_mainTex)).rgb;

	vec3 FinalColor = mix(_BaseColor, _BaseColor2, mixColor.r) * from_255;

	FinalColor = mix(FinalColor, _WaveColor * from_255, mixColor.g * mixColor.b);

	// 炫光
	vec2 uv_flashTex = new_uv;
	uv_flashTex += TIME * _FlashTexPannerSpeed;
	vec3 flashColor = texture2D(TEXTURE_3, fract(uv_flashTex)).xyz;
	FinalColor += flashColor * _FlashColor * from_255;

	// MatCap
	vec3 ref = normalize(reflect(viewPos, viewNormal) + vec3(0.0, 0.0, -1.0));
	vec2 matcap_uv = ref.xy * 0.5 + 0.5;
	matcap_uv.y = 1.0 - matcap_uv.y;
	vec3 matCapColor = texture2D(TEXTURE_2, fract(matcap_uv)).xyz;

	FinalColor += matCapColor * _MatCapIntensity;

	vec3 col = mix(FinalColor, FinalColor + _FrensnelColor * from_255, frensnelVal);

	// 描边
	vec4 outlineColor = texture2D(TEXTURE_0, uv);
	col = mix(col, outlineColor.rgb * _OutlineColor * from_255, outlineColor.a);

	// 透明度mask
	mediump float alpha = texture2D(TEXTURE_2, alpha_uv).a * _AlphaControl;
	alpha = clamp(mix(alpha, alpha + 0.15, outlineColor.a), 0.0, 1.0);

#ifdef USE_OVERLAY
	col = mix(col, OVERLAY_COLOR.rgb, OVERLAY_COLOR.a);
#endif // USE_OVERLAY

	gl_FragColor = vec4(col, alpha);
}
