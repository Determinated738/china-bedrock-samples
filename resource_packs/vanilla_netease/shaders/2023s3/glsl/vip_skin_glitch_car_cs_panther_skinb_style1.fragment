// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
precision highp float;

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

// version 300 code
_centroid in vec2 uv;

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code
varying vec2 uv;

#endif

#ifndef _UNIFORM_ENTITY_CONSTANTS_H
#define _UNIFORM_ENTITY_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
uniform ActorConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ActorConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 OVERLAY_COLOR;
UNIFORM vec4 TILE_LIGHT_COLOR;
UNIFORM vec2 TILE_LIGHT_INTENSITY;
UNIFORM vec4 CHANGE_COLOR;
UNIFORM vec4 GLINT_COLOR;
UNIFORM vec4 UV_ANIM;
UNIFORM vec2 UV_OFFSET;
UNIFORM vec2 UV_ROTATION;
UNIFORM vec2 GLINT_UV_SCALE;
UNIFORM vec4 MULTIPLICATIVE_TINT_CHANGE_COLOR;
END_UNIFORM_BLOCK

#endif


#ifndef _UNIFORM_PER_FRAME_CONSTANTS_H
#define _UNIFORM_PER_FRAME_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
layout(binding = 2) uniform PerFrameConstants {
#endif
// BEGIN_UNIFORM_BLOCK(PerFrameConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec3 VIEW_POS;
#ifdef MCPE_NETEASE
// TIME will loop from [0, 210]
// make sure your shader handles the case when it transitions from 210 to 0
#endif
UNIFORM float TIME;
#ifdef MCPE_NETEASE
UNIFORM vec4 BLEND_COLOR;
UNIFORM vec4 USER_FOR_COLOR_NEAR;
UNIFORM vec4 USER_FOR_COLOR_FAR;

UNIFORM vec4 LIGHT_NUM_STRENGTH;
UNIFORM vec4 LIGHT_POS_RANGE_0;
UNIFORM vec4 LIGHT_COLOR_ATTEN_0;
UNIFORM vec4 LIGHT_DIR_TYPE_0;
UNIFORM vec4 LIGHT_FALLOFF_COS_0;

UNIFORM vec4 LIGHT_POS_RANGE_1;
UNIFORM vec4 LIGHT_COLOR_ATTEN_1;
UNIFORM vec4 LIGHT_DIR_TYPE_1;
UNIFORM vec4 LIGHT_FALLOFF_COS_1;

UNIFORM vec4 LIGHT_POS_RANGE_2;
UNIFORM vec4 LIGHT_COLOR_ATTEN_2;
UNIFORM vec4 LIGHT_DIR_TYPE_2;
UNIFORM vec4 LIGHT_FALLOFF_COS_2;

UNIFORM vec4 PLANAR_SHADOW_PARAMS1;
UNIFORM vec4 PLANAR_SHADOW_PARAMS2;
UNIFORM vec4 PLANAR_SHADOW_PARAMS3;
UNIFORM vec4 PLANAR_SHADOW_PARAMS4;
#endif
UNIFORM vec4 FOG_COLOR;
UNIFORM vec2 FOG_CONTROL;
UNIFORM float RENDER_DISTANCE;
UNIFORM float FAR_CHUNKS_DISTANCE;
UNIFORM float OCCLUSION_HEIGHT_OFFSET;
END_UNIFORM_BLOCK

#endif

#ifndef _UNIFORM_SHADER_CONSTANTS_H
#define _UNIFORM_SHADER_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform ShaderConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 CURRENT_COLOR;
UNIFORM vec4 DARKEN;
UNIFORM vec3 TEXTURE_DIMENSIONS;
UNIFORM float HUD_OPACITY;
UNIFORM MAT4 UV_TRANSFORM;
END_UNIFORM_BLOCK

#endif

#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
#define USE_TEXEL_AA 0
#else
#define USE_TEXEL_AA 1
#endif

#ifdef ALPHA_TEST
#define USE_ALPHA_TEST 1
#else
#define USE_ALPHA_TEST 0
#endif

#if __VERSION__ >= 300

#ifndef _UNIFORM_SHADER_CONSTANTS_H
#define _UNIFORM_SHADER_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform ShaderConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 CURRENT_COLOR;
UNIFORM vec4 DARKEN;
UNIFORM vec3 TEXTURE_DIMENSIONS;
UNIFORM float HUD_OPACITY;
UNIFORM MAT4 UV_TRANSFORM;
END_UNIFORM_BLOCK

#endif


#if USE_TEXEL_AA

const float TEXEL_AA_LOD_CONSERVATIVE = -1.0;
const float TEXEL_AA_LOD_RELAXED = 2.0;

vec4 texture2D_AA(in sampler2D source, in highp vec2 originalUV) {

	highp vec2 dUV_dX = dFdx(originalUV) * TEXTURE_DIMENSIONS.xy;
	highp vec2 dUV_dY = dFdy(originalUV) * TEXTURE_DIMENSIONS.xy;

	highp vec2 delU = vec2(dUV_dX.x, dUV_dY.x);
	highp vec2 delV = vec2(dUV_dX.y, dUV_dY.y);
	highp vec2 adjustmentScalar = max(1.0 / vec2(length(delU), length(delV)), 1.0);

	highp vec2 fractionalTexel = fract(originalUV * TEXTURE_DIMENSIONS.xy);
	highp vec2 adjustedFractionalTexel = clamp(fractionalTexel * adjustmentScalar, 0.0, 0.5) + clamp(fractionalTexel * adjustmentScalar - (adjustmentScalar - 0.5), 0.0, 0.5);

	highp float lod = log2(sqrt(max(dot(dUV_dX, dUV_dX), dot(dUV_dY, dUV_dY))) * 2.0);
	highp float samplingMode = smoothstep(TEXEL_AA_LOD_RELAXED, TEXEL_AA_LOD_CONSERVATIVE, lod);

	highp vec2 adjustedUV = (adjustedFractionalTexel + floor(originalUV * TEXTURE_DIMENSIONS.xy)) / TEXTURE_DIMENSIONS.xy;
	lowp vec4 blendedSample = texture2D(source, mix(originalUV, adjustedUV, samplingMode));

	#if USE_ALPHA_TEST
		return vec4(blendedSample.rgb, mix(blendedSample.a, smoothstep(1.0/2.0, 1.0, blendedSample.a), samplingMode));
	#else
		return blendedSample;
	#endif
}

#endif // USE_TEXEL_AA

#endif //__VERSION__ >= 300


LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0; // base map
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1; // noise map
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2; // mask map

#define Emission 0.0000//<name:总体发光程度>
#define VertSpeed 25.0000// <name: 故障纹理抖动速度>
#define VertMoveAmount 0.1500//<name: 故障纹理抖动程度>
#define Amplitude 2.6800//<name: 故障纹理抖动幅度>

#define NoiseStep 1000.00//<name: 故障纹理出现的间歇调整>
#define Frequency 0.02// <name: 总频率>

#define Block_Offset 0.07//<name: 大块扰动偏移度>
#define Block_Amount 0.15//<name: 大块扰动数量>
#define Block_LinesWidth 10.0000//<name: 大块扰动线宽度>
#define JITTER_COLOR vec3(255.0,255.0,255.0)//<name: 小块扰动_扫描区域颜色>
#define Block_small_add 1.0000//<name: 小块扰动线宽度_在块状扰动线宽度的数值上增加>

const float FROM_255_TO_1 = 1.0 / 255.0;
const vec3 jitterColor = JITTER_COLOR * FROM_255_TO_1;

varying vec4 light;
varying vec4 fogColor;

varying vec2 uv2;

float Noise(){
    float TimeX = TIME * VertSpeed;
    float splitAmout = (1.0 + sin(TimeX * 6.0)) * 0.5;
    splitAmout *= 1.0 + sin(TimeX * 16.0) * 0.5;
    splitAmout *= 1.0 + sin(TimeX * 19.0) * 0.5;
    splitAmout *= 1.0 + sin(TimeX * 27.0) * 0.5;
    splitAmout = pow(splitAmout, Amplitude);
    splitAmout *= (0.05 * VertMoveAmount);
    return splitAmout;
}

float randomNoise(float x, float y){
	return fract(sin(dot(vec2(x, y), vec2(12.598987, 78.9233))) * 43758.35453);
}

float strength(){
	float stren = 0.5 + 0.5 * cos(TIME * Frequency);
	return fract(stren);
}

float trunc1(float x, float num_levels){
	return floor(x * num_levels) / num_levels;
}

vec2 trunc2(vec2 x, vec2 num_levels){
	return floor(x * num_levels) / num_levels;
}

float lerp(float a, float b, float x){
	return x * (b - a) + a;
}

vec4 lerp(vec4 a, vec4 b, float x){
	return x * (b - a) + a;
}

float blocLineRandom(vec2 uv) {
	float timeMul = TIME * strength();
	float truncTime = trunc1(timeMul, 4.0);
	vec2 temp = trunc2(uv.yy, vec2(8.0, 8.0)) + 100.0 * truncTime;
	float uv_trunc = randomNoise(temp.x, temp.y);
	float uv_randomTrunc = 6.0 * trunc1(timeMul, 24.0 * uv_trunc);
	float teamFloat = uv.y + uv_randomTrunc;

	temp = trunc2(vec2(teamFloat, teamFloat), vec2(8.0 *Block_LinesWidth , 8.0 *Block_LinesWidth) );
	float blockLine_random = 0.5 * randomNoise(temp.x, temp.y);

	blockLine_random = sign(blockLine_random) * clamp((abs(blockLine_random) - Block_Amount) / 0.4, 0.0, 1.0);
	blockLine_random = lerp(0.0, blockLine_random, Block_Offset);

	return blockLine_random;
}

float blocLineRandomSmall(vec2 uv) {
	float timeMul = TIME * strength();
	float truncTime = trunc1(timeMul, 4.0);
	vec2 temp = trunc2(uv.yy, vec2(8.0, 8.0)) + 100.0 * truncTime;
	float uv_trunc = randomNoise(temp.x, temp.y);
	float uv_randomTrunc = 6.0 * trunc1(timeMul, 24.0 * uv_trunc);
	float teamFloat = uv.y + uv_randomTrunc;

	temp = trunc2(
		vec2(teamFloat, teamFloat),
		vec2(
			8.0 * (Block_LinesWidth + Block_small_add),
			8.0 * (Block_LinesWidth + Block_small_add)
		)
	);
	float blockLine_random = 0.5 * randomNoise(temp.x, temp.y);
	blockLine_random = sign(blockLine_random) * clamp((abs(blockLine_random) - Block_Amount) / (0.4), 0.0, 1.0);
	blockLine_random = lerp(0.0, blockLine_random, (Block_Offset + 1.0));

	return blockLine_random;
}

void main() {
	float split = Noise();

	float blockLine_random = blocLineRandom(uv);
	float blockLine_random_small = blocLineRandomSmall(uv);

	float uv_block_X = clamp(uv.x + (0.1 * (blockLine_random * 0.5 - 0.025)), 0.0, 1.0);
	float uv_block_X2 = clamp(uv.x - (0.1 * (blockLine_random_small * 0.5 - 0.025)), 0.0, 1.0);

	vec2 glitchUV = vec2(uv_block_X, uv.y);
	vec2 glitchUV2 = vec2(uv_block_X2, uv.y);

	vec4 result = vec4(0.0);

	vec4 baseColor = texture2D(TEXTURE_0, uv);

	vec3 maskTex = texture2D(TEXTURE_2, uv).rgb;

	vec4 blockGlitch = texture2D(TEXTURE_0, glitchUV);
	float alphaBlock = blockGlitch.a;
	alphaBlock = step(0.1, alphaBlock); //边框大块扰动的mask
	vec4 glitchCol = blockGlitch;

	//small block
	float blockGlitchSmall = texture2D(TEXTURE_2, glitchUV2).r;
	blockGlitchSmall = step(0.1, blockGlitchSmall) * maskTex.g; // use G channel to mask scanning area

	vec4 noiseTex = texture2D(TEXTURE_1, fract(uv2));     //故障纹理 noiseTex.a 扫描区，无扰动
	float tempMask = min(blockGlitchSmall, noiseTex.a); //扫描区，小块
	float allGlitchAlpha = clamp(tempMask + alphaBlock, 0.0, 1.0); //块状故障抖动大+小
	allGlitchAlpha = step(0.1, allGlitchAlpha);

	blockGlitchSmall = lerp(0.0, blockGlitchSmall, noiseTex.a);
	vec4 glitchColSmall = blockGlitchSmall * vec4(jitterColor, 1.0);

	glitchCol = lerp(baseColor, glitchCol, maskTex.r);
	glitchCol = lerp(glitchCol, glitchColSmall, blockGlitchSmall);

	vec4 emissionCol = lerp(vec4(0.0), glitchCol, allGlitchAlpha) * Emission;
	result = glitchCol + emissionCol;

	split = step(NoiseStep * 0.001, split);
	float noiseAlpha = max(split, allGlitchAlpha);
	noiseAlpha = lerp(0.0, allGlitchAlpha, split);
	result.rgb = lerp(result, noiseTex, noiseAlpha).rgb;

	gl_FragColor = result;
}
