// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
precision highp float;

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

// version 300 code
_centroid in vec2 uv;

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code
varying vec2 uv;

#endif

#ifndef _UNIFORM_ENTITY_CONSTANTS_H
#define _UNIFORM_ENTITY_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
uniform ActorConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ActorConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 OVERLAY_COLOR;
UNIFORM vec4 TILE_LIGHT_COLOR;
UNIFORM vec2 TILE_LIGHT_INTENSITY;
UNIFORM vec4 CHANGE_COLOR;
UNIFORM vec4 GLINT_COLOR;
UNIFORM vec4 UV_ANIM;
UNIFORM vec2 UV_OFFSET;
UNIFORM vec2 UV_ROTATION;
UNIFORM vec2 GLINT_UV_SCALE;
UNIFORM vec4 MULTIPLICATIVE_TINT_CHANGE_COLOR;
END_UNIFORM_BLOCK

#endif


#ifndef _UNIFORM_PER_FRAME_CONSTANTS_H
#define _UNIFORM_PER_FRAME_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
layout(binding = 2) uniform PerFrameConstants {
#endif
// BEGIN_UNIFORM_BLOCK(PerFrameConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec3 VIEW_POS;
#ifdef MCPE_NETEASE
// TIME will loop from [0, 210]
// make sure your shader handles the case when it transitions from 210 to 0
#endif
UNIFORM float TIME;
#ifdef MCPE_NETEASE
UNIFORM vec4 BLEND_COLOR;
UNIFORM vec4 USER_FOR_COLOR_NEAR;
UNIFORM vec4 USER_FOR_COLOR_FAR;

UNIFORM vec4 LIGHT_NUM_STRENGTH;
UNIFORM vec4 LIGHT_POS_RANGE_0;
UNIFORM vec4 LIGHT_COLOR_ATTEN_0;
UNIFORM vec4 LIGHT_DIR_TYPE_0;
UNIFORM vec4 LIGHT_FALLOFF_COS_0;

UNIFORM vec4 LIGHT_POS_RANGE_1;
UNIFORM vec4 LIGHT_COLOR_ATTEN_1;
UNIFORM vec4 LIGHT_DIR_TYPE_1;
UNIFORM vec4 LIGHT_FALLOFF_COS_1;

UNIFORM vec4 LIGHT_POS_RANGE_2;
UNIFORM vec4 LIGHT_COLOR_ATTEN_2;
UNIFORM vec4 LIGHT_DIR_TYPE_2;
UNIFORM vec4 LIGHT_FALLOFF_COS_2;

UNIFORM vec4 PLANAR_SHADOW_PARAMS1;
UNIFORM vec4 PLANAR_SHADOW_PARAMS2;
UNIFORM vec4 PLANAR_SHADOW_PARAMS3;
UNIFORM vec4 PLANAR_SHADOW_PARAMS4;
#endif
UNIFORM vec4 FOG_COLOR;
UNIFORM vec2 FOG_CONTROL;
UNIFORM float RENDER_DISTANCE;
UNIFORM float FAR_CHUNKS_DISTANCE;
UNIFORM float OCCLUSION_HEIGHT_OFFSET;
END_UNIFORM_BLOCK

#endif

#ifndef _UNIFORM_SHADER_CONSTANTS_H
#define _UNIFORM_SHADER_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform ShaderConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 CURRENT_COLOR;
UNIFORM vec4 DARKEN;
UNIFORM vec3 TEXTURE_DIMENSIONS;
UNIFORM float HUD_OPACITY;
UNIFORM MAT4 UV_TRANSFORM;
END_UNIFORM_BLOCK

#endif

const float fresnelPow = 1.68;
const float fresnelBias = 0.0;
const float fresnelScale = 0.98;
#ifdef SWK_SKIN
const vec4 fresnelColor = vec4(0.894117, 0.713725, 0.219607, 0.0);
#else
const vec4 fresnelColor = vec4(1.0, 0.125, 0.125, 0.0);
#endif

float fresnel(vec3 normal, vec3 viewDir){

    float NdotV = dot( normal, viewDir );

	return fresnelBias + fresnelScale * pow( 1.0 - NdotV, fresnelPow );
}

// more customized fresnel
float fresnel_ex(vec3 normal, vec3 viewDir, float bias, float scale, float powValue){
	float result = bias + scale * pow(1.0 - dot(normal, viewDir), powValue);
    return clamp(result, 0.0, 1.0);
}

#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
#define USE_TEXEL_AA 0
#else
#define USE_TEXEL_AA 1
#endif

#ifdef ALPHA_TEST
#define USE_ALPHA_TEST 1
#else
#define USE_ALPHA_TEST 0
#endif

#if __VERSION__ >= 300

#ifndef _UNIFORM_SHADER_CONSTANTS_H
#define _UNIFORM_SHADER_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform ShaderConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 CURRENT_COLOR;
UNIFORM vec4 DARKEN;
UNIFORM vec3 TEXTURE_DIMENSIONS;
UNIFORM float HUD_OPACITY;
UNIFORM MAT4 UV_TRANSFORM;
END_UNIFORM_BLOCK

#endif


#if USE_TEXEL_AA

const float TEXEL_AA_LOD_CONSERVATIVE = -1.0;
const float TEXEL_AA_LOD_RELAXED = 2.0;

vec4 texture2D_AA(in sampler2D source, in highp vec2 originalUV) {

	highp vec2 dUV_dX = dFdx(originalUV) * TEXTURE_DIMENSIONS.xy;
	highp vec2 dUV_dY = dFdy(originalUV) * TEXTURE_DIMENSIONS.xy;

	highp vec2 delU = vec2(dUV_dX.x, dUV_dY.x);
	highp vec2 delV = vec2(dUV_dX.y, dUV_dY.y);
	highp vec2 adjustmentScalar = max(1.0 / vec2(length(delU), length(delV)), 1.0);

	highp vec2 fractionalTexel = fract(originalUV * TEXTURE_DIMENSIONS.xy);
	highp vec2 adjustedFractionalTexel = clamp(fractionalTexel * adjustmentScalar, 0.0, 0.5) + clamp(fractionalTexel * adjustmentScalar - (adjustmentScalar - 0.5), 0.0, 0.5);

	highp float lod = log2(sqrt(max(dot(dUV_dX, dUV_dX), dot(dUV_dY, dUV_dY))) * 2.0);
	highp float samplingMode = smoothstep(TEXEL_AA_LOD_RELAXED, TEXEL_AA_LOD_CONSERVATIVE, lod);

	highp vec2 adjustedUV = (adjustedFractionalTexel + floor(originalUV * TEXTURE_DIMENSIONS.xy)) / TEXTURE_DIMENSIONS.xy;
	lowp vec4 blendedSample = texture2D(source, mix(originalUV, adjustedUV, samplingMode));

	#if USE_ALPHA_TEST
		return vec4(blendedSample.rgb, mix(blendedSample.a, smoothstep(1.0/2.0, 1.0, blendedSample.a), samplingMode));
	#else
		return blendedSample;
	#endif
}

#endif // USE_TEXEL_AA

#endif //__VERSION__ >= 300


LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

#define UV_SCALE vec2(1.0,1.0)
#define UV_FLOW vec2(-0.02,-0.02)


#define GRADIENT_MODE 0.0
#define GRADIENT_COLOR vec3(153.0,255.0,206.0)
#define DELTA_COLOR_HORIZONTAL vec3(0.0,10.0,0.0)
#define DELTA_COLOR_VERTICAL vec3(110.0,42.0,173.0)

#define FRESNEL_OFFSET 0.0
#define FRESNEL_COLOR vec3(34.0,143.0,65.0)
#define FRESNEL_FLOW vec2(-0.03,-0.03)
#define NOISE_SCALE vec2(0.2,0.2)

#define STAR_SIZE 4.0000
#define STAR_DENSITY 0.5

const float PI = 3.1415926535;
const float INV_PI = 1.0 / PI;
const float FROM_255_TO_1 = 1.0 / 255.0;

const vec2 uv_scale = UV_SCALE;
const vec3 fresnel_color = FRESNEL_COLOR * FROM_255_TO_1;

const vec3 gradient_color = GRADIENT_COLOR * FROM_255_TO_1;
const vec3 delta_color_horizontal = DELTA_COLOR_HORIZONTAL * FROM_255_TO_1;
const vec3 delta_color_vertical = DELTA_COLOR_VERTICAL * FROM_255_TO_1;

varying vec4 light;
varying vec4 fogColor;

varying vec4 eyeDir;
varying vec3 worldSpaceNormal;

float rand(vec2 uv){
    return fract(sin(dot(uv, vec2(0.5161573, 0.4346789)))
    * 13571.5977913417);
}

void main()
{
	vec4 color = texture2D( TEXTURE_0, uv );

	/********** Galaxy Effect **********/
	vec3 view_norm = normalize(eyeDir.xyz);
	float view_dist = eyeDir.w;

	// calculate spherical coordinates
	vec2 view_uv = vec2(
		atan(-view_norm.z, view_norm.x) * INV_PI * 0.5 + 0.5,
		0.5 - view_norm.y * 0.5
	) * uv_scale;
	view_uv = fract(view_uv * max(floor(view_dist * 0.3), 3.0) + TIME * UV_FLOW);

	/********** Fresnel Effect **********/
	float noise = texture2D(
		TEXTURE_2,
		fract(uv * NOISE_SCALE + TIME * FRESNEL_FLOW)
	).r;
	vec3 fresColor = fresnel_color * fresnel_ex(normalize(worldSpaceNormal), -view_norm, FRESNEL_OFFSET, 1.0, 2.0);
	fresColor = smoothstep(0.05, 1.0, fresColor) * noise;

	/********** Gradient Color Effect **********/
	vec3 galaxyColor = texture2D(
		TEXTURE_1,
		view_uv
	).rgb;
	vec3 gradientColor = gradient_color + delta_color_horizontal * abs(view_uv.x * 2.0 - 1.0) + delta_color_vertical * (view_norm.y * 0.5 + 0.5);
	float gradientStep = step(GRADIENT_MODE, 0.5);
	// MUL mode or ADD mode
	galaxyColor = gradientStep * (galaxyColor * gradientColor) + (1.0 - gradientStep) * (galaxyColor + gradientColor);

	/********** Star Effect **********/
	vec2 star_uv = floor(floor(view_uv * vec2(1024.0, 512.0) * uv_scale) / STAR_SIZE);
    vec2 move_dir = normalize(vec2(rand(star_uv * 0.4987368153), rand(-star_uv * 0.31168489)) - 0.5);
    star_uv = fract((star_uv + TIME * move_dir) * 2.0 / 512.0);
	float star_val = texture2D(TEXTURE_2, star_uv).g;
    star_val = smoothstep(0.8 - 0.2 * STAR_DENSITY, 0.8, star_val);
	
	vec3 starColor = (gradientStep * star_val * gradientColor + (1.0 - gradientStep) * (star_val + gradientColor));

	// use black hole to cover the artifect cause by spherical texturing
	// when abs(view_norm.y) is nearly 1.0
	view_norm.xz *= view_dist * 2.4; // black hole should scale with camera distance
	mediump float yLerp = normalize(view_norm).y;
	vec3 shaderColor = mix(galaxyColor + fresColor + starColor, vec3(0.05), smoothstep(0.5, 1.0, yLerp * yLerp));

	/********** Mixture **********/
	float colorStep = step(color.a, 0.5);
	color.rgb = (1.0 - colorStep) * color.rgb + colorStep * shaderColor;
	color.a = 1.0;

	gl_FragColor = color;

#ifdef USE_OVERLAY
	gl_FragColor.rgb = mix(gl_FragColor.rgb, OVERLAY_COLOR.rgb, OVERLAY_COLOR.a);
#endif // USE_OVERLAY
}
