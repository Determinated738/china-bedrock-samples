// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
#ifndef _UNIFORM_PER_FRAME_CONSTANTS_H
#define _UNIFORM_PER_FRAME_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
layout(binding = 2) uniform PerFrameConstants {
#endif
// BEGIN_UNIFORM_BLOCK(PerFrameConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec3 VIEW_POS;
#ifdef MCPE_NETEASE
// TIME will loop from [0, 210]
// make sure your shader handles the case when it transitions from 210 to 0
#endif
UNIFORM float TIME;
#ifdef MCPE_NETEASE
UNIFORM vec4 BLEND_COLOR;
UNIFORM vec4 USER_FOR_COLOR_NEAR;
UNIFORM vec4 USER_FOR_COLOR_FAR;

UNIFORM vec4 LIGHT_NUM_STRENGTH;
UNIFORM vec4 LIGHT_POS_RANGE_0;
UNIFORM vec4 LIGHT_COLOR_ATTEN_0;
UNIFORM vec4 LIGHT_DIR_TYPE_0;
UNIFORM vec4 LIGHT_FALLOFF_COS_0;

UNIFORM vec4 LIGHT_POS_RANGE_1;
UNIFORM vec4 LIGHT_COLOR_ATTEN_1;
UNIFORM vec4 LIGHT_DIR_TYPE_1;
UNIFORM vec4 LIGHT_FALLOFF_COS_1;

UNIFORM vec4 LIGHT_POS_RANGE_2;
UNIFORM vec4 LIGHT_COLOR_ATTEN_2;
UNIFORM vec4 LIGHT_DIR_TYPE_2;
UNIFORM vec4 LIGHT_FALLOFF_COS_2;

UNIFORM vec4 PLANAR_SHADOW_PARAMS1;
UNIFORM vec4 PLANAR_SHADOW_PARAMS2;
UNIFORM vec4 PLANAR_SHADOW_PARAMS3;
UNIFORM vec4 PLANAR_SHADOW_PARAMS4;
#endif
UNIFORM vec4 FOG_COLOR;
UNIFORM vec2 FOG_CONTROL;
UNIFORM float RENDER_DISTANCE;
UNIFORM float FAR_CHUNKS_DISTANCE;
UNIFORM float OCCLUSION_HEIGHT_OFFSET;
END_UNIFORM_BLOCK

#endif

#ifndef ENTITY_FRAGMENT_UTIL_H
#define ENTITY_FRAGMENT_UTIL_H
// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

// version 300 code
_centroid in vec2 uv;

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code
varying vec2 uv;

#endif

#ifndef _UNIFORM_ENTITY_CONSTANTS_H
#define _UNIFORM_ENTITY_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
uniform ActorConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ActorConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 OVERLAY_COLOR;
UNIFORM vec4 TILE_LIGHT_COLOR;
UNIFORM vec2 TILE_LIGHT_INTENSITY;
UNIFORM vec4 CHANGE_COLOR;
UNIFORM vec4 GLINT_COLOR;
UNIFORM vec4 UV_ANIM;
UNIFORM vec2 UV_OFFSET;
UNIFORM vec2 UV_ROTATION;
UNIFORM vec2 GLINT_UV_SCALE;
UNIFORM vec4 MULTIPLICATIVE_TINT_CHANGE_COLOR;
END_UNIFORM_BLOCK

#endif

#ifndef _UNIFORM_SHADER_CONSTANTS_H
#define _UNIFORM_SHADER_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform ShaderConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 CURRENT_COLOR;
UNIFORM vec4 DARKEN;
UNIFORM vec3 TEXTURE_DIMENSIONS;
UNIFORM float HUD_OPACITY;
UNIFORM MAT4 UV_TRANSFORM;
END_UNIFORM_BLOCK

#endif


#ifndef __LOCAL_LIGHT_UTIL_H__
#define __LOCAL_LIGHT_UTIL_H__
#ifndef _UNIFORM_PER_FRAME_CONSTANTS_H
#define _UNIFORM_PER_FRAME_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
layout(binding = 2) uniform PerFrameConstants {
#endif
// BEGIN_UNIFORM_BLOCK(PerFrameConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec3 VIEW_POS;
#ifdef MCPE_NETEASE
// TIME will loop from [0, 210]
// make sure your shader handles the case when it transitions from 210 to 0
#endif
UNIFORM float TIME;
#ifdef MCPE_NETEASE
UNIFORM vec4 BLEND_COLOR;
UNIFORM vec4 USER_FOR_COLOR_NEAR;
UNIFORM vec4 USER_FOR_COLOR_FAR;

UNIFORM vec4 LIGHT_NUM_STRENGTH;
UNIFORM vec4 LIGHT_POS_RANGE_0;
UNIFORM vec4 LIGHT_COLOR_ATTEN_0;
UNIFORM vec4 LIGHT_DIR_TYPE_0;
UNIFORM vec4 LIGHT_FALLOFF_COS_0;

UNIFORM vec4 LIGHT_POS_RANGE_1;
UNIFORM vec4 LIGHT_COLOR_ATTEN_1;
UNIFORM vec4 LIGHT_DIR_TYPE_1;
UNIFORM vec4 LIGHT_FALLOFF_COS_1;

UNIFORM vec4 LIGHT_POS_RANGE_2;
UNIFORM vec4 LIGHT_COLOR_ATTEN_2;
UNIFORM vec4 LIGHT_DIR_TYPE_2;
UNIFORM vec4 LIGHT_FALLOFF_COS_2;

UNIFORM vec4 PLANAR_SHADOW_PARAMS1;
UNIFORM vec4 PLANAR_SHADOW_PARAMS2;
UNIFORM vec4 PLANAR_SHADOW_PARAMS3;
UNIFORM vec4 PLANAR_SHADOW_PARAMS4;
#endif
UNIFORM vec4 FOG_COLOR;
UNIFORM vec2 FOG_CONTROL;
UNIFORM float RENDER_DISTANCE;
UNIFORM float FAR_CHUNKS_DISTANCE;
UNIFORM float OCCLUSION_HEIGHT_OFFSET;
END_UNIFORM_BLOCK

#endif


vec3 CalcPointLighting(in vec3 P, in vec3 N, in vec4 lightPosRange, in vec4 lightColorAtten)
{
	vec3 L = lightPosRange.rgb - P;
	float D2 = dot(L, L) + 0.001;
	L *= inversesqrt(D2);
	float NoL = clamp( dot(N, L), 0.0, 1.0);
	float Atten = clamp(D2 / (lightPosRange.w * lightPosRange.w), 0.0, 1.0);
	Atten = 1.0 - Atten * Atten;
	Atten *= Atten;
	Atten *= 1.0 / (D2 * lightColorAtten.w + 1.0);
	vec3 color = lightColorAtten.rgb * (NoL * Atten);
	return color;
}

vec3 CalcSpotLighting(in vec3 P, in vec3 N, in vec4 lightPosRange, in vec4 lightColorAtten, 
	in vec3 lightDir, in vec3 fallOffCosHalfThetaPHi)
{
	vec3 L = lightPosRange.rgb - P;
	float D2 = dot(L, L) + 0.001;
	L *= inversesqrt(D2);
	float NoL = clamp( dot(N, L), 0.0, 1.0);
	float Atten = clamp(D2 / (lightPosRange.w * lightPosRange.w), 0.0, 1.0);
	Atten = 1.0 - Atten * Atten;
	Atten *= Atten;
	Atten *= 1.0 / (D2 * lightColorAtten.w + 1.0);
	float DoL = dot( lightDir, -L );
	float Spot = clamp(DoL * fallOffCosHalfThetaPHi.y + fallOffCosHalfThetaPHi.z, 0.0, 1.0);
	Spot *= Spot;
	vec3 color = lightColorAtten.rgb * (NoL * Atten * Spot);
	return color;
	// DiffLit += color * shadowMapCoefficient;
	// SpecLit += color * GetPbrBRDF(L, N, V, rough2, NoV, NoL, SpecularColor) ;
}

vec3 _LocalLightRadiance(vec4 position, vec4 normal) {
//#if defined(RNGL_UNLIT) || !defined(FANCY)
//	return vec3(0.0);
//#else
	// vec3 pLightColor1 = pointLightColor1.xyz;
	// vec3 pLightPos = pointLightPosRadius1.xyz;
	// float radius = pointLightPosRadius1.w;
	// float dLight = max(0.0, dot(N, normalize(pLightPos - position)));
	// float attenuation = attenuate_cusp(length(position.xyz - pLightPos), radius, 1.0);
	// return (pLightColor1 * dLight + vec3(1.0)) * attenuation;
	//float lightNum = LIGHT_NUM.x;
	vec3 ret = vec3(0);
	//if (lightNum >= 1.0)
#if	defined(NETEASE_LOCAL_LIGHT_NUM_1) || defined(NETEASE_LOCAL_LIGHT_NUM_2) || defined(NETEASE_LOCAL_LIGHT_NUM_3)
	{
		float type = LIGHT_DIR_TYPE_0.w;
		if (type < 1.0)
		{
			ret.xyz += CalcPointLighting(position.xyz, normal.xyz, LIGHT_POS_RANGE_0.xyzw, LIGHT_COLOR_ATTEN_0.xyzw);
		}
		else
		{
			ret.xyz += CalcSpotLighting(position.xyz, normal.xyz, LIGHT_POS_RANGE_0.xyzw, LIGHT_COLOR_ATTEN_0.xyzw,
				LIGHT_DIR_TYPE_0.xyz, LIGHT_FALLOFF_COS_0.xyz);
		}
	}
#endif
	//else if (lightNum >= 2.0)
#if	defined(NETEASE_LOCAL_LIGHT_NUM_2) || defined(NETEASE_LOCAL_LIGHT_NUM_3)
	{
		float type = LIGHT_DIR_TYPE_1.w;
		if (type < 1.0)
		{
			ret.xyz += CalcPointLighting(position.xyz, normal.xyz, LIGHT_POS_RANGE_1.xyzw, LIGHT_COLOR_ATTEN_1.xyzw);
		}
		else
		{
			ret.xyz += CalcSpotLighting(position.xyz, normal.xyz, LIGHT_POS_RANGE_1.xyzw, LIGHT_COLOR_ATTEN_1.xyzw,
				LIGHT_DIR_TYPE_1.xyz, LIGHT_FALLOFF_COS_1.xyz);
		}
	}
#endif
	//else if (lightNum >= 3.0)
#if	defined(NETEASE_LOCAL_LIGHT_NUM_3)
	{
		float type = LIGHT_DIR_TYPE_2.w;
		if (type < 1.0)
		{
			ret.xyz += CalcPointLighting(position.xyz, normal.xyz, LIGHT_POS_RANGE_2.xyzw, LIGHT_COLOR_ATTEN_2.xyzw);
		}
		else
		{
			ret.xyz += CalcSpotLighting(position.xyz, normal.xyz, LIGHT_POS_RANGE_2.xyzw, LIGHT_COLOR_ATTEN_2.xyzw,
				LIGHT_DIR_TYPE_2.xyz, LIGHT_FALLOFF_COS_2.xyz);
		}
	}
#endif
	return ret;

//#endif
}

vec4 getLightColor(vec4 worldSpacePosition, vec4 worldSpaceNormal) {
	vec3 finalColor = vec3(0, 0, 0);
	vec3 localLightRad = _LocalLightRadiance(worldSpacePosition, worldSpaceNormal);
	finalColor += localLightRad.xyz;
	return vec4(finalColor.xyz, 0);
}
#endif
#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
#define USE_TEXEL_AA 0
#else
#define USE_TEXEL_AA 1
#endif

#ifdef ALPHA_TEST
#define USE_ALPHA_TEST 1
#else
#define USE_ALPHA_TEST 0
#endif

#if __VERSION__ >= 300

#ifndef _UNIFORM_SHADER_CONSTANTS_H
#define _UNIFORM_SHADER_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform ShaderConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 CURRENT_COLOR;
UNIFORM vec4 DARKEN;
UNIFORM vec3 TEXTURE_DIMENSIONS;
UNIFORM float HUD_OPACITY;
UNIFORM MAT4 UV_TRANSFORM;
END_UNIFORM_BLOCK

#endif


#if USE_TEXEL_AA

const float TEXEL_AA_LOD_CONSERVATIVE = -1.0;
const float TEXEL_AA_LOD_RELAXED = 2.0;

vec4 texture2D_AA(in sampler2D source, in highp vec2 originalUV) {

	highp vec2 dUV_dX = dFdx(originalUV) * TEXTURE_DIMENSIONS.xy;
	highp vec2 dUV_dY = dFdy(originalUV) * TEXTURE_DIMENSIONS.xy;

	highp vec2 delU = vec2(dUV_dX.x, dUV_dY.x);
	highp vec2 delV = vec2(dUV_dX.y, dUV_dY.y);
	highp vec2 adjustmentScalar = max(1.0 / vec2(length(delU), length(delV)), 1.0);

	highp vec2 fractionalTexel = fract(originalUV * TEXTURE_DIMENSIONS.xy);
	highp vec2 adjustedFractionalTexel = clamp(fractionalTexel * adjustmentScalar, 0.0, 0.5) + clamp(fractionalTexel * adjustmentScalar - (adjustmentScalar - 0.5), 0.0, 0.5);

	highp float lod = log2(sqrt(max(dot(dUV_dX, dUV_dX), dot(dUV_dY, dUV_dY))) * 2.0);
	highp float samplingMode = smoothstep(TEXEL_AA_LOD_RELAXED, TEXEL_AA_LOD_CONSERVATIVE, lod);

	highp vec2 adjustedUV = (adjustedFractionalTexel + floor(originalUV * TEXTURE_DIMENSIONS.xy)) / TEXTURE_DIMENSIONS.xy;
	lowp vec4 blendedSample = texture2D(source, mix(originalUV, adjustedUV, samplingMode));

	#if USE_ALPHA_TEST
		return vec4(blendedSample.rgb, mix(blendedSample.a, smoothstep(1.0/2.0, 1.0, blendedSample.a), samplingMode));
	#else
		return blendedSample;
	#endif
}

#endif // USE_TEXEL_AA

#endif //__VERSION__ >= 300

#line 9

#ifdef USE_EMISSIVE
	#ifdef USE_ONLY_EMISSIVE
		#define NEEDS_DISCARD(C) (C.a == 0.0 || C.a == 1.0 )
	#else
		#define NEEDS_DISCARD(C) (C.a + C.r + C.g + C.b == 0.0)
	#endif
#else
	#ifndef USE_COLOR_MASK
		#define NEEDS_DISCARD(C) (C.a < 0.5)
	#else
		#define NEEDS_DISCARD(C) (C.a == 0.0)
	#endif
#endif

/**************** Preset Variables Begin ****************/
#if defined(USE_ALPHA) || defined(USE_BRIGHT)
uniform vec4 HIDE_COLOR;
#endif

#ifdef TINTED_ALPHA_TEST
	varying float alphaTestMultiplier;
#endif

#ifdef GLINT
	varying vec2 layer1UV;
	varying vec2 layer2UV;
	varying vec4 glintColor;
	varying vec4 tileLightColor;
#endif

#ifdef COLOR_BASED
	varying vec4 vertColor;
#endif

#ifdef USE_OVERLAY
	// When drawing horses on specific android devices, overlay color ends up being garbage data.
	// Changing overlay color to high precision appears to fix the issue on devices tested
	varying highp vec4 overlayColor;
#endif

#ifdef NETEASE_METALLIC
varying vec3 worldNormalM;
varying vec3 worldViewDirM;
varying vec3 worldLightDirM;
#endif
/**************** Preset Variables End ****************/


bool shouldDiscard(vec4 albedo) {
	highp float epsilon = 0.0001;
	bool result = false;
	vec3 diffuse = albedo.rgb;
	highp float alpha = albedo.a;

#ifdef USE_EMISSIVE
	#ifdef USE_ONLY_EMISSIVE
		// C.a == 0.0f || C.a == 1.0f
		result = alpha < epsilon || alpha > 1.0 - epsilon;
	#else
		// C.a + C.r + C.g + C.b == 0.0
		result = dot(vec4(diffuse, alpha), vec4(1.0, 1.0, 1.0, 1.0)) < epsilon;
	#endif
#else
	#ifdef USE_STRICT_ALPHA_TEST
		// C.a == 0.0
		result = alpha < epsilon;
	#else
		#ifndef USE_COLOR_MASK
			// C.a < 0.5
			result = alpha < 0.5;
		#else
			// C.a == 0.0
			result = alpha == 0.0;
		#endif
	#endif
#endif

	return result;
}

vec4 glintBlend(vec4 dest, vec4 source) {
	// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
	return vec4(source.rgb * source.rgb, abs(source.a)) + vec4(dest.rgb, 0.0);
}

vec4 getSampledColor(sampler2D texToSample, vec2 uv) {
	vec4 color = vec4(1.0);

#ifndef NO_TEXTURE
	#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
		color = texture2D(texToSample, uv );
	#else
		color = texture2D_AA(texToSample, uv);
	#endif
#endif // NO_TEXTURE

	return color;
}

void applyOverlayColor(inout vec4 color) {
#ifdef USE_OVERLAY
	//use either the diffuse or the OVERLAY_COLOR
	color.rgb = mix(color, overlayColor, overlayColor.a).rgb;
#endif
#ifdef NETEASE_DRAWLINE
	color = vec4(OVERLAY_COLOR.rgb, 1.0);
#endif
}

void applyGlint(sampler2D glintTexture, inout vec4 color) {
#ifdef GLINT
	// Applies color mask to glint texture instead and blends with original color
	vec4 layer1 = texture2D(glintTexture, fract(layer1UV)).rgbr * glintColor;
	vec4 layer2 = texture2D(glintTexture, fract(layer2UV)).rgbr * glintColor;
	vec4 glint = (layer1 + layer2) * tileLightColor;

	color = glintBlend(color, glint);
#endif
}

vec3 getReflectColor(sampler2D TEXTURE_1, vec4 clipPos, vec3 worldNormal, vec3 viewDir, float reflectIntensity) {
#ifdef RNGL_REFLECT
	vec2 reflectUV = clipPos.xy / clipPos.w;
	reflectUV.xy = reflectUV.xy * 0.5 + vec2(0.5, 0.5);
	reflectUV.y = 1.0 - reflectUV.y;
	vec3 reflectColor = texture2D(TEXTURE_1, reflectUV.xy).xyz;//screen space uv.
	float NoV = dot(normalize(viewDir), normalize(worldNormal.xyz));
	float BRDFApprox2NV = exp2( -9.28 * NoV ) ;
	reflectColor = reflectColor.rgb * BRDFApprox2NV * reflectIntensity;
	return reflectColor;
#else
	return vec3(0.0, 0.0, 0.0);
#endif
}

float getBloomMask(sampler2D bloomTexture, vec2 uv) {
	float bloomMask = 1.0;
// sample bloom mask value
#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
	bloomMask = texture2D(bloomTexture, uv).r;
#else
	bloomMask = texture2D_AA(bloomTexture, uv).r;
#endif // !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
	return bloomMask;
}

float getEmissive(sampler2D emissiveTex, vec2 uv) {
#if defined(USE_BLOOM) && !defined(NO_TEXTURE)
	return getBloomMask(emissiveTex, uv);
#else
	return 0.0;
#endif
}

void applyFog(inout vec4 color, vec4 fogColor) {
	color.rgb = mix( color.rgb, fogColor.rgb, fogColor.a );
}

void applySpecificProcess(inout vec4 color) {
#ifdef NETEASE_METALLIC
	const float shininess = 64.0;  
	const float metalness = 1.0;  
	vec3 lightColor = vec3(1.0, 1.0, 1.0);
	highp vec3 N = normalize(worldNormalM);
	highp vec3 V = normalize(worldViewDirM);
	highp vec3 L = normalize(worldLightDirM);
	highp vec3 H = normalize(V + L);
	vec3 baseColor = color.rgb;

	float diff = max(dot(N, L), 0.0);
	vec3 diffuse = diff * lightColor * baseColor;

	// Fresnel
	float F0 = 0.04;
	vec3 F0Metal = mix(vec3(F0), baseColor, metalness);
	float fresnel = pow(1.0 - max(dot(N, V), 0.0), 5.0);
	vec3 fresnelEffect = F0Metal + (1.0 - F0Metal) * fresnel;

	float spec = pow(max(dot(N, H), 0.0), shininess);
	vec3 specular = fresnelEffect * spec * lightColor;

	vec3 ambient = baseColor * 0.6;

	vec3 finalColor = ambient + diffuse + specular;
	color.rgb = finalColor;
#endif
}

#if defined(USE_MULTITEXTURE) || defined(GLINT_BLEND_BLOOM)
void entityCommonFrag(inout vec4 color, sampler2D TEXTURE_0, sampler2D TEXTURE_1, sampler2D TEXTURE_2) {
#else
void entityCommonFrag(inout vec4 color, sampler2D TEXTURE_0, sampler2D TEXTURE_1) {
#endif

#ifndef NO_TEXTURE
	#ifdef MASKED_MULTITEXTURE
		vec4 tex1 = texture2D(TEXTURE_1, uv);
		// If tex1 has a non-black color and no alpha, use color; otherwise use tex1 
		float maskedTexture = float(dot( tex1.rgb, vec3(1.0, 1.0, 1.0) ) * ( 1.0 - tex1.a ) > 0.0);
		color = mix(tex1, color, maskedTexture);
	#endif // MASKED_MULTITEXTURE

	#if defined(ALPHA_TEST) && !defined(USE_MULTITEXTURE) && !defined(MULTIPLICATIVE_TINT)
		if(shouldDiscard(color))
			discard;
	#endif // ALPHA_TEST

	#ifdef TINTED_ALPHA_TEST
		vec4 testColor = color;
		testColor.a *= alphaTestMultiplier;
		if(shouldDiscard(testColor))
			discard;
	#endif // TINTED_ALPHA_TEST
#endif // NO_TEXTURE

#ifdef COLOR_BASED
	color *= vertColor;
#endif

#ifdef MULTI_COLOR_TINT
	// Texture is a mask for tinting with two colors
	vec2 colorMask = color.rg;

	// Apply the base color tint
	color.rgb = colorMask.rrr * CHANGE_COLOR.rgb;

	// Apply the secondary color mask and tint so long as its grayscale value is not 0
	color.rgb = mix(color, colorMask.gggg * MULTIPLICATIVE_TINT_CHANGE_COLOR, ceil(colorMask.g)).rgb;
#else
	#ifdef USE_COLOR_MASK
		color.rgb = mix(color.rgb, color.rgb * CHANGE_COLOR.rgb, color.a);
		color.a *= CHANGE_COLOR.a;
	#endif

	#ifdef ITEM_IN_HAND
		color.rgb = mix(color.rgb, color.rgb * CHANGE_COLOR.rgb, vertColor.a);
		#if defined(MCPE_PLATFORM_NX) && defined(NO_TEXTURE) && defined(GLINT)
			// TODO(adfairfi): This needs to be properly fixed soon. We have a User Story for it in VSO: 102633
			vec3 dummyColor = texture2D(TEXTURE_0, vec2(0.0, 0.0)).rgb;
			color.rgb += dummyColor * 0.000000001;
		#endif
	#endif
#endif // MULTI_COLOR_TINT

#ifdef USE_MULTITEXTURE
	vec4 tex1 = texture2D(TEXTURE_1, uv);
	vec4 tex2 = texture2D(TEXTURE_2, uv);
	color.rgb = mix(color.rgb, tex1.rgb, tex1.a);
	#ifdef ALPHA_TEST
		if (color.a < 0.5 && tex1.a == 0.0) {
			discard;
		}
	#endif

	#ifdef COLOR_SECOND_TEXTURE
		if (tex2.a > 0.0) {
			color.rgb = tex2.rgb + (tex2.rgb * CHANGE_COLOR.rgb - tex2.rgb) * tex2.a;//lerp(tex2.rgb, tex2 * changeColor.rgb, tex2.a)
		}
	#else
		color.rgb = mix(color.rgb, tex2.rgb, tex2.a);
	#endif
#endif // USE_MULTITEXTURE

#if defined(MULTIPLICATIVE_TINT) && defined(ALPHA_TEST)
	vec4 tintTex = texture2D(TEXTURE_1, uv);
	#ifdef MULTIPLICATIVE_TINT_COLOR
		tintTex.rgb = tintTex.rgb * MULTIPLICATIVE_TINT_CHANGE_COLOR.rgb;
	#endif

	color.rgb = mix(color.rgb, tintTex.rgb, tintTex.a);
	if (color.a + tintTex.a <= 0.0) {
		discard;
	}
#endif

#ifdef USE_ALPHA
	color.a *= HIDE_COLOR.a;
#endif

#ifdef USE_BRIGHT
	color.rgb *= HIDE_COLOR.a;
#endif

#ifdef UI_ENTITY
	color.a *= HUD_OPACITY;
#endif

#ifdef PET_SKILL_PREVIEW
	color.rgb = mix(color.rgb, vec3(0.0, 0.0, 1.0), 0.6);
	color.a = 0.6;
#endif
}

#endif // ENTITY_FRAGMENT_UTIL_H

#line 5

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
#if defined(USE_MULTITEXTURE) || defined(GLINT_BLEND_BLOOM)
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;
#endif
// LAYOUT_BINDING(3) uniform sampler2D TEXTURE_3;

#if defined(GLINT) && defined(USE_BLOOM)
#define GLINT_BLEND_BLOOM
#endif

varying vec4 light;
varying vec4 fogColor;

#ifdef RNGL_LOCAL_LIGHT
varying vec4 worldSpacePos;
varying vec4 worldSpaceNormal;
#endif

void main() {
	vec4 color = getSampledColor(TEXTURE_0, uv);

#if defined(USE_MULTITEXTURE) || defined(GLINT_BLEND_BLOOM)
	entityCommonFrag(color, TEXTURE_0, TEXTURE_1, TEXTURE_2);
#else
	entityCommonFrag(color, TEXTURE_0, TEXTURE_1);
#endif

	applyOverlayColor(color);

	// lighting
#ifdef GLINT_BLEND_BLOOM
	lowp float emissive = getEmissive(TEXTURE_2, uv);
#else
	lowp float emissive = getEmissive(TEXTURE_1, uv);
#endif

#ifdef USE_EMISSIVE
	//make glowy stuff
	color *= mix(vec4(1.0), light, color.a);
#else

#ifdef RNGL_LOCAL_LIGHT
	vec4 lightCol = getLightColor(worldSpacePos, worldSpaceNormal);
	vec4 totalLight = light.rgba * LIGHT_NUM_STRENGTH.y + vec4(lightCol.xyz, 1.0);
	color.rgb *= (emissive < 0.1) ? totalLight.rgb : vec3(emissive);
#else
	color.rgb *= (emissive < 0.1) ? light.rgb : vec3(emissive);
#endif

#endif

	applySpecificProcess(color);
	
	//apply fog
	applyFog(color, fogColor);

	applyGlint(TEXTURE_1, color);

	gl_FragColor = color;
}
