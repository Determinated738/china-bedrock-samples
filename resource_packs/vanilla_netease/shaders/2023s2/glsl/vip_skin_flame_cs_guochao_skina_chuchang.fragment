// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
precision highp float;

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

// version 300 code
_centroid in vec2 uv;

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code
varying vec2 uv;

#endif

#ifndef _UNIFORM_ENTITY_CONSTANTS_H
#define _UNIFORM_ENTITY_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
uniform ActorConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ActorConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 OVERLAY_COLOR;
UNIFORM vec4 TILE_LIGHT_COLOR;
UNIFORM vec2 TILE_LIGHT_INTENSITY;
UNIFORM vec4 CHANGE_COLOR;
UNIFORM vec4 GLINT_COLOR;
UNIFORM vec4 UV_ANIM;
UNIFORM vec2 UV_OFFSET;
UNIFORM vec2 UV_ROTATION;
UNIFORM vec2 GLINT_UV_SCALE;
UNIFORM vec4 MULTIPLICATIVE_TINT_CHANGE_COLOR;
END_UNIFORM_BLOCK

#endif


#ifndef _UNIFORM_PER_FRAME_CONSTANTS_H
#define _UNIFORM_PER_FRAME_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
layout(binding = 2) uniform PerFrameConstants {
#endif
// BEGIN_UNIFORM_BLOCK(PerFrameConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec3 VIEW_POS;
#ifdef MCPE_NETEASE
// TIME will loop from [0, 210]
// make sure your shader handles the case when it transitions from 210 to 0
#endif
UNIFORM float TIME;
#ifdef MCPE_NETEASE
UNIFORM vec4 BLEND_COLOR;
UNIFORM vec4 USER_FOR_COLOR_NEAR;
UNIFORM vec4 USER_FOR_COLOR_FAR;

UNIFORM vec4 LIGHT_NUM_STRENGTH;
UNIFORM vec4 LIGHT_POS_RANGE_0;
UNIFORM vec4 LIGHT_COLOR_ATTEN_0;
UNIFORM vec4 LIGHT_DIR_TYPE_0;
UNIFORM vec4 LIGHT_FALLOFF_COS_0;

UNIFORM vec4 LIGHT_POS_RANGE_1;
UNIFORM vec4 LIGHT_COLOR_ATTEN_1;
UNIFORM vec4 LIGHT_DIR_TYPE_1;
UNIFORM vec4 LIGHT_FALLOFF_COS_1;

UNIFORM vec4 LIGHT_POS_RANGE_2;
UNIFORM vec4 LIGHT_COLOR_ATTEN_2;
UNIFORM vec4 LIGHT_DIR_TYPE_2;
UNIFORM vec4 LIGHT_FALLOFF_COS_2;

UNIFORM vec4 PLANAR_SHADOW_PARAMS1;
UNIFORM vec4 PLANAR_SHADOW_PARAMS2;
UNIFORM vec4 PLANAR_SHADOW_PARAMS3;
UNIFORM vec4 PLANAR_SHADOW_PARAMS4;
#endif
UNIFORM vec4 FOG_COLOR;
UNIFORM vec2 FOG_CONTROL;
UNIFORM float RENDER_DISTANCE;
UNIFORM float FAR_CHUNKS_DISTANCE;
UNIFORM float OCCLUSION_HEIGHT_OFFSET;
END_UNIFORM_BLOCK

#endif

#ifndef _UNIFORM_SHADER_CONSTANTS_H
#define _UNIFORM_SHADER_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform ShaderConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 CURRENT_COLOR;
UNIFORM vec4 DARKEN;
UNIFORM vec3 TEXTURE_DIMENSIONS;
UNIFORM float HUD_OPACITY;
UNIFORM MAT4 UV_TRANSFORM;
END_UNIFORM_BLOCK

#endif

const float fresnelPow = 1.68;
const float fresnelBias = 0.0;
const float fresnelScale = 0.98;
#ifdef SWK_SKIN
const vec4 fresnelColor = vec4(0.894117, 0.713725, 0.219607, 0.0);
#else
const vec4 fresnelColor = vec4(1.0, 0.125, 0.125, 0.0);
#endif

float fresnel(vec3 normal, vec3 viewDir){

    float NdotV = dot( normal, viewDir );

	return fresnelBias + fresnelScale * pow( 1.0 - NdotV, fresnelPow );
}

// more customized fresnel
float fresnel_ex(vec3 normal, vec3 viewDir, float bias, float scale, float powValue){
	float result = bias + scale * pow(1.0 - dot(normal, viewDir), powValue);
    return clamp(result, 0.0, 1.0);
}

#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
#define USE_TEXEL_AA 0
#else
#define USE_TEXEL_AA 1
#endif

#ifdef ALPHA_TEST
#define USE_ALPHA_TEST 1
#else
#define USE_ALPHA_TEST 0
#endif

#if __VERSION__ >= 300

#ifndef _UNIFORM_SHADER_CONSTANTS_H
#define _UNIFORM_SHADER_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform ShaderConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 CURRENT_COLOR;
UNIFORM vec4 DARKEN;
UNIFORM vec3 TEXTURE_DIMENSIONS;
UNIFORM float HUD_OPACITY;
UNIFORM MAT4 UV_TRANSFORM;
END_UNIFORM_BLOCK

#endif


#if USE_TEXEL_AA

const float TEXEL_AA_LOD_CONSERVATIVE = -1.0;
const float TEXEL_AA_LOD_RELAXED = 2.0;

vec4 texture2D_AA(in sampler2D source, in highp vec2 originalUV) {

	highp vec2 dUV_dX = dFdx(originalUV) * TEXTURE_DIMENSIONS.xy;
	highp vec2 dUV_dY = dFdy(originalUV) * TEXTURE_DIMENSIONS.xy;

	highp vec2 delU = vec2(dUV_dX.x, dUV_dY.x);
	highp vec2 delV = vec2(dUV_dX.y, dUV_dY.y);
	highp vec2 adjustmentScalar = max(1.0 / vec2(length(delU), length(delV)), 1.0);

	highp vec2 fractionalTexel = fract(originalUV * TEXTURE_DIMENSIONS.xy);
	highp vec2 adjustedFractionalTexel = clamp(fractionalTexel * adjustmentScalar, 0.0, 0.5) + clamp(fractionalTexel * adjustmentScalar - (adjustmentScalar - 0.5), 0.0, 0.5);

	highp float lod = log2(sqrt(max(dot(dUV_dX, dUV_dX), dot(dUV_dY, dUV_dY))) * 2.0);
	highp float samplingMode = smoothstep(TEXEL_AA_LOD_RELAXED, TEXEL_AA_LOD_CONSERVATIVE, lod);

	highp vec2 adjustedUV = (adjustedFractionalTexel + floor(originalUV * TEXTURE_DIMENSIONS.xy)) / TEXTURE_DIMENSIONS.xy;
	lowp vec4 blendedSample = texture2D(source, mix(originalUV, adjustedUV, samplingMode));

	#if USE_ALPHA_TEST
		return vec4(blendedSample.rgb, mix(blendedSample.a, smoothstep(1.0/2.0, 1.0, blendedSample.a), samplingMode));
	#else
		return blendedSample;
	#endif
}

#endif // USE_TEXEL_AA

#endif //__VERSION__ >= 300


LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0; // albedo
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1; // flame

#define UV_SCALE vec2(2.0,2.0)// <name: uv缩放>
#define UV_FLOW vec2(-0.1,0.15)// <name: uv流动速度>
#define FLOW_AXIS 1.0000// <name:流动坐标轴_0X1Y2Z>

// 0 MUL 1 ADD
#define GRADIENT_MODE 0.00// <name: 渐变模式_0乘1加>
#define GRADIENT_COLOR vec3(500.0,180.0,60.0)// <name: 渐变色起点>
#define DELTA_COLOR_HORIZONTAL vec3(100.0,120.0,60.0)// <name: 横向渐变色变化>
#define DELTA_COLOR_VERTICAL vec3(150.0,220.0,60.0)// <name: 纵向渐变色变化>

#define FRESNEL_OFFSET 0.0500// <name: 边缘反射亮度>
#define FRESNEL_COLOR vec3(40.0,80.0,60.0)// <name: 边缘反射色>

const float PI = 3.1415926535;
const float INV_PI = 1.0 / PI;
const float FROM_255_TO_1 = 1.0 / 255.0;

const vec2 uv_scale = UV_SCALE;
const vec3 fresnel_color = FRESNEL_COLOR * FROM_255_TO_1;

const vec3 gradient_color = GRADIENT_COLOR * FROM_255_TO_1;
const vec3 delta_color_horizontal = DELTA_COLOR_HORIZONTAL * FROM_255_TO_1;
const vec3 delta_color_vertical = DELTA_COLOR_VERTICAL * FROM_255_TO_1;

varying vec4 light;
varying vec4 fogColor;

varying vec3 OSPosition;
varying vec3 OSNormal; // abs() and normalize()
varying vec3 viewSpaceNormal;

void main()
{
	/********** Albedo **********/
	vec4 color = texture2D( TEXTURE_0, uv ) * light;

	/********** Flame Effect **********/
	
	vec2 flame_uv = vec2(0.0, 0.0);

	// get face orientation
	vec3 _o = abs(OSPosition - 0.5);
	if (FLOW_AXIS == 0.0){ // X
		mediump float st = step(0.99, OSNormal.x); // st == 1.0 means X face
		flame_uv.x = OSPosition.x;
		flame_uv.y = (OSPosition.y + OSPosition.z);
		flame_uv = st * OSPosition.yz + (1.0 - st) * flame_uv;
	}else if (FLOW_AXIS == 1.0){ // Y
		mediump float st = step(0.99, OSNormal.y); // st == 1.0 means Y face
		flame_uv.x = OSPosition.y;
		flame_uv.y = (OSPosition.x + OSPosition.z);
		flame_uv = st * OSPosition.xz + (1.0 - st) * flame_uv;
	}else{ // Z
		mediump float st = step(0.99, OSNormal.z); // st == 1.0 means Z face
		flame_uv.x = OSPosition.z;
		flame_uv.y = (OSPosition.x + OSPosition.y);
		flame_uv = st * OSPosition.xy + (1.0 - st) * flame_uv;
	}
	flame_uv = fract(flame_uv * uv_scale + TIME * UV_FLOW);
	
	vec3 flameColor = texture2D(TEXTURE_1, flame_uv).rgb;

	/********** Gradient Color Effect **********/
	vec2 gradient_uv = abs(flame_uv - 0.5) * 2.0;
	gradient_uv = sqrt(gradient_uv);
	vec3 gradientColor = gradient_color
		+ delta_color_horizontal * gradient_uv.x
		+ delta_color_vertical * gradient_uv.y;

	/********** Fresnel Effect **********/
	vec3 fresColor = fresnel_color * fresnel_ex(normalize(viewSpaceNormal), vec3(0.0, 0.0, 1.0), FRESNEL_OFFSET, 1.0, 2.0);

	/********** Gradient Effect **********/
	if (GRADIENT_MODE < 0.5){
		// MUL mode
		flameColor = flameColor * gradientColor;
	}else{
		// ADD mode
		flameColor = flameColor + gradientColor;
	}

	vec3 shaderColor = flameColor + fresColor;

	/********** Mixture **********/
	float colorStep = step(color.a, 0.5);
	color.rgb = (1.0 - colorStep) * color.rgb + colorStep * shaderColor;

	gl_FragColor = color;
}
