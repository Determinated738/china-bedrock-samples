// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.
precision highp float;

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

// version 300 code
_centroid in vec2 uv;

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code
varying vec2 uv;

#endif

#ifndef _UNIFORM_WORLD_CONSTANTS_H
#define _UNIFORM_WORLD_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
layout(binding = 1) uniform WorldConstants {
#endif
// BEGIN_UNIFORM_BLOCK(WorldConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM MAT4 WORLDVIEWPROJ;
UNIFORM MAT4 WORLD;
UNIFORM MAT4 WORLDVIEW;
UNIFORM MAT4 PROJ;
#ifdef MCPE_NETEASE
UNIFORM MAT4 VIEWPROJ;
#endif
END_UNIFORM_BLOCK

#endif

#ifndef _UNIFORM_ENTITY_CONSTANTS_H
#define _UNIFORM_ENTITY_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
uniform ActorConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ActorConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 OVERLAY_COLOR;
UNIFORM vec4 TILE_LIGHT_COLOR;
UNIFORM vec2 TILE_LIGHT_INTENSITY;
UNIFORM vec4 CHANGE_COLOR;
UNIFORM vec4 GLINT_COLOR;
UNIFORM vec4 UV_ANIM;
UNIFORM vec2 UV_OFFSET;
UNIFORM vec2 UV_ROTATION;
UNIFORM vec2 GLINT_UV_SCALE;
UNIFORM vec4 MULTIPLICATIVE_TINT_CHANGE_COLOR;
END_UNIFORM_BLOCK

#endif


#ifndef _UNIFORM_PER_FRAME_CONSTANTS_H
#define _UNIFORM_PER_FRAME_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
layout(binding = 2) uniform PerFrameConstants {
#endif
// BEGIN_UNIFORM_BLOCK(PerFrameConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec3 VIEW_POS;
#ifdef MCPE_NETEASE
// TIME will loop from [0, 210]
// make sure your shader handles the case when it transitions from 210 to 0
#endif
UNIFORM float TIME;
#ifdef MCPE_NETEASE
UNIFORM vec4 BLEND_COLOR;
UNIFORM vec4 USER_FOR_COLOR_NEAR;
UNIFORM vec4 USER_FOR_COLOR_FAR;

UNIFORM vec4 LIGHT_NUM_STRENGTH;
UNIFORM vec4 LIGHT_POS_RANGE_0;
UNIFORM vec4 LIGHT_COLOR_ATTEN_0;
UNIFORM vec4 LIGHT_DIR_TYPE_0;
UNIFORM vec4 LIGHT_FALLOFF_COS_0;

UNIFORM vec4 LIGHT_POS_RANGE_1;
UNIFORM vec4 LIGHT_COLOR_ATTEN_1;
UNIFORM vec4 LIGHT_DIR_TYPE_1;
UNIFORM vec4 LIGHT_FALLOFF_COS_1;

UNIFORM vec4 LIGHT_POS_RANGE_2;
UNIFORM vec4 LIGHT_COLOR_ATTEN_2;
UNIFORM vec4 LIGHT_DIR_TYPE_2;
UNIFORM vec4 LIGHT_FALLOFF_COS_2;

UNIFORM vec4 PLANAR_SHADOW_PARAMS1;
UNIFORM vec4 PLANAR_SHADOW_PARAMS2;
UNIFORM vec4 PLANAR_SHADOW_PARAMS3;
UNIFORM vec4 PLANAR_SHADOW_PARAMS4;
#endif
UNIFORM vec4 FOG_COLOR;
UNIFORM vec2 FOG_CONTROL;
UNIFORM float RENDER_DISTANCE;
UNIFORM float FAR_CHUNKS_DISTANCE;
UNIFORM float OCCLUSION_HEIGHT_OFFSET;
END_UNIFORM_BLOCK

#endif

#ifndef _UNIFORM_SHADER_CONSTANTS_H
#define _UNIFORM_SHADER_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform ShaderConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 CURRENT_COLOR;
UNIFORM vec4 DARKEN;
UNIFORM vec3 TEXTURE_DIMENSIONS;
UNIFORM float HUD_OPACITY;
UNIFORM MAT4 UV_TRANSFORM;
END_UNIFORM_BLOCK

#endif

const float fresnelPow = 1.68;
const float fresnelBias = 0.0;
const float fresnelScale = 0.98;
#ifdef SWK_SKIN
const vec4 fresnelColor = vec4(0.894117, 0.713725, 0.219607, 0.0);
#else
const vec4 fresnelColor = vec4(1.0, 0.125, 0.125, 0.0);
#endif

float fresnel(vec3 normal, vec3 viewDir){

    float NdotV = dot( normal, viewDir );

	return fresnelBias + fresnelScale * pow( 1.0 - NdotV, fresnelPow );
}

// more customized fresnel
float fresnel_ex(vec3 normal, vec3 viewDir, float bias, float scale, float powValue){
	float result = bias + scale * pow(1.0 - dot(normal, viewDir), powValue);
    return clamp(result, 0.0, 1.0);
}

#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
#define USE_TEXEL_AA 0
#else
#define USE_TEXEL_AA 1
#endif

#ifdef ALPHA_TEST
#define USE_ALPHA_TEST 1
#else
#define USE_ALPHA_TEST 0
#endif

#if __VERSION__ >= 300

#ifndef _UNIFORM_SHADER_CONSTANTS_H
#define _UNIFORM_SHADER_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform ShaderConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 CURRENT_COLOR;
UNIFORM vec4 DARKEN;
UNIFORM vec3 TEXTURE_DIMENSIONS;
UNIFORM float HUD_OPACITY;
UNIFORM MAT4 UV_TRANSFORM;
END_UNIFORM_BLOCK

#endif


#if USE_TEXEL_AA

const float TEXEL_AA_LOD_CONSERVATIVE = -1.0;
const float TEXEL_AA_LOD_RELAXED = 2.0;

vec4 texture2D_AA(in sampler2D source, in highp vec2 originalUV) {

	highp vec2 dUV_dX = dFdx(originalUV) * TEXTURE_DIMENSIONS.xy;
	highp vec2 dUV_dY = dFdy(originalUV) * TEXTURE_DIMENSIONS.xy;

	highp vec2 delU = vec2(dUV_dX.x, dUV_dY.x);
	highp vec2 delV = vec2(dUV_dX.y, dUV_dY.y);
	highp vec2 adjustmentScalar = max(1.0 / vec2(length(delU), length(delV)), 1.0);

	highp vec2 fractionalTexel = fract(originalUV * TEXTURE_DIMENSIONS.xy);
	highp vec2 adjustedFractionalTexel = clamp(fractionalTexel * adjustmentScalar, 0.0, 0.5) + clamp(fractionalTexel * adjustmentScalar - (adjustmentScalar - 0.5), 0.0, 0.5);

	highp float lod = log2(sqrt(max(dot(dUV_dX, dUV_dX), dot(dUV_dY, dUV_dY))) * 2.0);
	highp float samplingMode = smoothstep(TEXEL_AA_LOD_RELAXED, TEXEL_AA_LOD_CONSERVATIVE, lod);

	highp vec2 adjustedUV = (adjustedFractionalTexel + floor(originalUV * TEXTURE_DIMENSIONS.xy)) / TEXTURE_DIMENSIONS.xy;
	lowp vec4 blendedSample = texture2D(source, mix(originalUV, adjustedUV, samplingMode));

	#if USE_ALPHA_TEST
		return vec4(blendedSample.rgb, mix(blendedSample.a, smoothstep(1.0/2.0, 1.0, blendedSample.a), samplingMode));
	#else
		return blendedSample;
	#endif
}

#endif // USE_TEXEL_AA

#endif //__VERSION__ >= 300


LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0; // base map
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1; // dispersion

const float FROM_255_TO_1 = 1.0 / 255.0;

varying vec3 worldNormal;
varying vec3 worldViewDir;

#define Color_F vec3(5.0,20.0,20.0)//<name:颜色,color:255>
#define COLOR_MODE 1.00//<name:颜色模式0乘1加>
#define MIN_ALPHA 1.0000//<name:最小透明度>
#define __xx__ 0.0000//<name:光照-------------->
#define FRES_SCALE 1.0000//<name:反射强度缩放>
#define FRES_BIAS 0.20//<name:反射强度加减>
#define ETA 1.2000//<name:折射率>
#define DISPARSION_F 0.7500//<name:折射光强度>
#define dispersionSpeed_F 0.26//<name:折射光流动速度>
#define __yy__ 0.0//<name:闪点-------------->
#define shineInt_F 1.00//<name:闪点强度>
#define StarsDensity_F 0.30//<name:闪点密度>
#define STAR_SIZE 2.00//<name:闪点大小>
#define UV_PARA vec2(1.0,256.0)//<name:闪烁速度_闪烁划分大小>
#define UV_SCALE vec2(2.0,2.0)//<name:闪点UV缩放>

const vec3 colorF = Color_F * FROM_255_TO_1;

vec3 lerp3(vec3 a, vec3 b, float x){
	return a + x * (b - a);
}

float lerp1(float a, float b, float x){
	return a + x * (b - a);
}

float rand(vec2 uv){
	return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);
}

vec2 loop(vec2 value, vec2 size){
return fract(value / size) * size;
}

vec2 random_unit_vector(vec2 pos){
	float r = rand(pos * vec2(1.3219547, 0.5133416));
	r *= 3.1415926535 * 2.0;
	return vec2(
		cos(r),
		sin(r)
	);
}

float perlin(vec2 uuv, float BLOCK_SIZE, float BLOCK_NUM){
	vec2 index = floor(uuv / BLOCK_SIZE);
	vec2 MAGIC = vec2(BLOCK_NUM, BLOCK_NUM);
	index = fract(index / BLOCK_NUM) * BLOCK_NUM;
	uuv = fract(uuv / BLOCK_SIZE);

	vec2 v0 = loop(index, MAGIC);
	float val0 = dot(random_unit_vector(v0), uuv);
	v0 = loop(index + vec2(0.0, 1.0), MAGIC);
	float val1 = dot(random_unit_vector(v0), uuv - vec2(0.0, 1.0));
	float ret = lerp1(val0, val1, uuv.y);

	v0 = loop(index + vec2(1.0, 0.0), MAGIC);
	val0 = dot(random_unit_vector(v0), uuv - vec2(1.0, 0.0));
	v0 = loop(index + vec2(1.0, 1.0), MAGIC);
	val1 = dot(random_unit_vector(v0), uuv - vec2(1.0, 1.0));

	return lerp1(ret, lerp1(val0, val1, uuv.y), uuv.x);
}

void main() {
	const vec3 L = normalize(vec3(0.5, 0.5, 0.5)); // use fake light direction
	highp vec3 viewDir = normalize(worldViewDir);
	highp vec3 normalDir = normalize(worldNormal);

	highp float fresnelVal = 1.0 - dot(normalDir, viewDir);
	fresnelVal = clamp(FRES_BIAS + FRES_SCALE * fresnelVal * fresnelVal, 0.0, 1.0);

	// refraction
	vec3 dir = refract(viewDir, normalDir, 1.0 / ETA) * 0.5 + 0.5 + TIME * 0.04 * dispersionSpeed_F;
	vec3 rColor = texture2D(TEXTURE_1, fract(dir.xy)).rgb * DISPARSION_F;
	
	// reflection
	dir = reflect(viewDir, normalDir) * 0.5 + 0.5;
	rColor += texture2D(TEXTURE_1, dir.xy).rgb * fresnelVal;

	//sparkles
	vec2 star_uv = floor(floor(uv * vec2(512.0, 512.0) * UV_SCALE) / STAR_SIZE);
	vec2 move_dir = normalize(vec2(rand(star_uv * 0.4987368153), rand(-star_uv * 0.31168489)) - 0.5);
	star_uv = star_uv + TIME * move_dir;
	float star_val = perlin(star_uv, UV_PARA.x, UV_PARA.y) * 0.5 + 0.5;
	star_val = smoothstep(0.8 - 0.2 * StarsDensity_F, 0.8, star_val);
	vec3 sparCol = rColor * star_val * shineInt_F;

	// ************* Mixture *************
	vec3 result = rColor + sparCol;
	if (COLOR_MODE == 0.0){
		result = result * colorF;
	}else{
		result = result + colorF;
	}

	// base color and alpha mask
	vec4 baseColor = texture2D(TEXTURE_0, uv);
	mediump float alphaMask = step(0.5, baseColor.a);
	result = alphaMask * baseColor.rgb + (1.0 - alphaMask) * result;
#ifdef USE_OVERLAY
	result = mix(result, OVERLAY_COLOR.rgb, OVERLAY_COLOR.a);
#endif // USE_OVERLAY

	// 1.0(use base map) or MIN_ALPHA(use shader color)
	alphaMask += (1.0 - alphaMask) * fresnelVal; // stronger reflection brings higher alpha
	alphaMask = max(alphaMask, MIN_ALPHA);

	gl_FragColor = vec4(result, alphaMask);
}
