// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#endif

#ifndef _UNIFORM_SHADER_CONSTANTS_H
#define _UNIFORM_SHADER_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform ShaderConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 CURRENT_COLOR;
UNIFORM vec4 DARKEN;
UNIFORM vec3 TEXTURE_DIMENSIONS;
UNIFORM float HUD_OPACITY;
UNIFORM MAT4 UV_TRANSFORM;
END_UNIFORM_BLOCK

#endif

#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
#define USE_TEXEL_AA 0
#else
#define USE_TEXEL_AA 1
#endif

#ifdef ALPHA_TEST
#define USE_ALPHA_TEST 1
#else
#define USE_ALPHA_TEST 0
#endif

#if __VERSION__ >= 300

#ifndef _UNIFORM_SHADER_CONSTANTS_H
#define _UNIFORM_SHADER_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform ShaderConstants {
#endif
// BEGIN_UNIFORM_BLOCK(ShaderConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 CURRENT_COLOR;
UNIFORM vec4 DARKEN;
UNIFORM vec3 TEXTURE_DIMENSIONS;
UNIFORM float HUD_OPACITY;
UNIFORM MAT4 UV_TRANSFORM;
END_UNIFORM_BLOCK

#endif


#if USE_TEXEL_AA

const float TEXEL_AA_LOD_CONSERVATIVE = -1.0;
const float TEXEL_AA_LOD_RELAXED = 2.0;

vec4 texture2D_AA(in sampler2D source, in highp vec2 originalUV) {

	highp vec2 dUV_dX = dFdx(originalUV) * TEXTURE_DIMENSIONS.xy;
	highp vec2 dUV_dY = dFdy(originalUV) * TEXTURE_DIMENSIONS.xy;

	highp vec2 delU = vec2(dUV_dX.x, dUV_dY.x);
	highp vec2 delV = vec2(dUV_dX.y, dUV_dY.y);
	highp vec2 adjustmentScalar = max(1.0 / vec2(length(delU), length(delV)), 1.0);

	highp vec2 fractionalTexel = fract(originalUV * TEXTURE_DIMENSIONS.xy);
	highp vec2 adjustedFractionalTexel = clamp(fractionalTexel * adjustmentScalar, 0.0, 0.5) + clamp(fractionalTexel * adjustmentScalar - (adjustmentScalar - 0.5), 0.0, 0.5);

	highp float lod = log2(sqrt(max(dot(dUV_dX, dUV_dX), dot(dUV_dY, dUV_dY))) * 2.0);
	highp float samplingMode = smoothstep(TEXEL_AA_LOD_RELAXED, TEXEL_AA_LOD_CONSERVATIVE, lod);

	highp vec2 adjustedUV = (adjustedFractionalTexel + floor(originalUV * TEXTURE_DIMENSIONS.xy)) / TEXTURE_DIMENSIONS.xy;
	lowp vec4 blendedSample = texture2D(source, mix(originalUV, adjustedUV, samplingMode));

	#if USE_ALPHA_TEST
		return vec4(blendedSample.rgb, mix(blendedSample.a, smoothstep(1.0/2.0, 1.0, blendedSample.a), samplingMode));
	#else
		return blendedSample;
	#endif
}

#endif // USE_TEXEL_AA

#endif //__VERSION__ >= 300


// Get the gray result for color rgb.
vec3 graying(vec3 rgb, float R)
{
	float gray = dot(rgb, vec3(0.2126, 0.7152, 0.0722));
	return rgb * R + vec3(gray, gray, gray) * (1.0 - R);
}


#ifdef ENABLE_RENDERNODE_PARAM
#ifndef _UNIFORM_UI_TRANSFORMS_CONSTANTS_H
#define _UNIFORM_UI_TRANSFORMS_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform UITransformsConstants {
#endif
// BEGIN_UNIFORM_BLOCK(UITransformsConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM highp mat4 TRANSFORM;
#ifdef MCPE_NETEASE
UNIFORM highp mat4 TEXTCOLORS;
#endif
END_UNIFORM_BLOCK

#endif

#endif

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;

#ifdef ENABLE_RENDERNODE_PARAM
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
#endif

#ifdef ENABLE_VERTEX_COLOR
varying vec4 color;
#endif

#ifdef ENABLE_DIFFUSE_TEXTURE
varying vec2 uv;
#endif

#ifdef ENABLE_TEXCOORD1
varying vec2 uv1;
#endif

void main()
{
	vec4 diffuse = vec4(0, 0, 0, 1);
	float mask = 1.0;

#ifdef ENABLE_DIFFUSE_TEXTURE
	#if defined(ENABLE_RENDERNODE_PARAM) && defined(ENABLE_TEXCOORD1)
		if (TRANSFORM[0].x > 0.0)  // blur
		{
			vec4 blurParam = TRANSFORM[1].xyzw;

			diffuse = texture2D( TEXTURE_0, uv ) * 0.1;

			diffuse += (texture2D( TEXTURE_0, uv + vec2(+1.407333, 0) * blurParam.xy ) +
						texture2D( TEXTURE_0, uv + vec2(-1.407333, 0) * blurParam.xy ) +
						texture2D( TEXTURE_0, uv + vec2(0, +1.407333) * blurParam.xy ) +
						texture2D( TEXTURE_0, uv + vec2(0, -1.407333) * blurParam.xy )) * 0.08;

			diffuse += (texture2D( TEXTURE_0, uv + vec2(+1.732051, +1.732051) * blurParam.xy ) +
						texture2D( TEXTURE_0, uv + vec2(-1.732051, +1.732051) * blurParam.xy ) +
						texture2D( TEXTURE_0, uv + vec2(+1.732051, -1.732051) * blurParam.xy ) +
						texture2D( TEXTURE_0, uv + vec2(-1.732051, -1.732051) * blurParam.xy )) * 0.065;
			
			diffuse += (texture2D( TEXTURE_0, uv + vec2(+3.294215, 0) * blurParam.xy ) +
						texture2D( TEXTURE_0, uv + vec2(-3.294215, 0) * blurParam.xy ) +
						texture2D( TEXTURE_0, uv + vec2(0, +3.294215) * blurParam.xy ) +
						texture2D( TEXTURE_0, uv + vec2(0, -3.294215) * blurParam.xy )) * 0.05;

			diffuse += (texture2D( TEXTURE_0, uv + vec2(+3.605551, +3.605551) * blurParam.xy ) +
						texture2D( TEXTURE_0, uv + vec2(-3.605551, +3.605551) * blurParam.xy ) +
						texture2D( TEXTURE_0, uv + vec2(+3.605551, -3.605551) * blurParam.xy ) +
						texture2D( TEXTURE_0, uv + vec2(-3.605551, -3.605551) * blurParam.xy )) * 0.03;
		}
		else
		{
			diffuse = texture2D( TEXTURE_0, uv );
		}

		if (TRANSFORM[0].y > 0.0)  // mask
		{
			mask = texture2D( TEXTURE_1, uv1 ).a;
		}
	#else
		diffuse = texture2D( TEXTURE_0, uv );
	#endif

	#ifdef ENABLE_VERTEX_COLOR
		diffuse = color * diffuse;
	#endif
#else
	#ifdef ENABLE_VERTEX_COLOR
		diffuse = color;
	#else
		diffuse = CURRENT_COLOR;
	#endif
#endif

#ifdef ENABLE_GRAYING
	diffuse.rgb = graying(diffuse.rgb, DARKEN.a);
#endif

	gl_FragColor = diffuse * mask;
}
